User Menu:

1. Register Student: 
	=> addStudent will not have StudentNotFound Exception

2. User Table :	
	=> It should only contain UserId,email,password and UserType rest will be in professor, student and admin table

3. Login Student:
	=> If it's not approved by admin, it should not be allowed to login the system

Admin Menu:

1. Approve Student:
	1.1 Approve individually, giving the following error:
	
	Select your choice: 
	1. Approve all students
	2. Approve Students one by one.
      >>2
	[INFO,AdminService,main] Approve students One By One function started
	You want to approve Student with id: 2ec0bd
	Press 1 for yes and 2 for no
      >>1
	Error: Unknown column '2ec0bd' in 'where clause' <====== ERROR

2. Add Professor:
	2.1 Asking for user_id, make it autogenerated rather than taking input.

3. Add Course:
	3.1 Asking for course_id, make it autogenerated rather than taking input.
	3.2 check the messages which are displayed using logger are appropriate or not (check for both add course and drop course)
	 
		For example: 
		After adding course successfully following was the output in the console:
		[INFO,CourseService,main] you are adding this course100
		[INFO,CourseDaoOperation,main] Adding course Maths to catalog
		[INFO,CourseDaoOperation,main] Course is added to catalog
		[ERROR,CourseService,main] Error message: Course with courseCode: 100 can't be added. <======This message should not be present
		Course added 

4. [ADD NEW] askForPayment:
	4.1 will create entry in payment and payment notification (after which student will make payment). 

5. Generate Grade card:
	5.1 print appropriate message when the grade card is generated.
Professor:
1. View Courses:
	1.1 Give appropriate message while the list is empty
	1.2 Give the details of courses like name and all (use join in sql query to get it)

2. View Endrolled Student:
	2.1 print the details of student too, not only the id (can be done by using join)
 	
	
Student:

1. Add course:
	1.1 While adding the course, we need to check if that course is already exists in registeredCourse

2. Drop course:
	2.1 handle the case when the course id passed is not present in database 
		Current Output: Course dropped successfully
		Expected Output: Course is not endrolled by you

3. view grade:
	3.1 Error: "Column 'timestamp' not found." Resolve it
	3.2 show student details and course details with their id


4. Payment: (check the flow is as suggested, if it is already like this, no need to check)
	4.1 it should check payment table: if there is no pending payment it should give appropriate message.
	4.2 otherwise the payment flow will be continued. 

Notes:

	1. Any methods should not be static in Service and Dao package, and should used interface to access them:
	For example:
		StudentInterface student=new StudentService();
		student.callmethod();

	2. Test your code and give appropriate logger message and print statement wherever required, think yourself as user while testing.
	
	3. All the input which are taken should be present in the Application package, if it is found in service or dao package then shift that to application package.
	
	4. All the methods which are to show the deatils then it should be stored in list in dao package rather than printing it directly there, we need to print them in application package.
	
	5. 3rd and 4th point will reduce our load while working for REST.
